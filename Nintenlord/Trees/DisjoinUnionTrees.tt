<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using Nintenlord.Utility;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reactive;

namespace Nintenlord.Trees
{
<#
for(int i = 2; i <= 8; i++)
{
    var types = Enumerable.Range(0, i).Select(n => $"T{n}").ToArray();

    var either1 = $"Either<{string.Join(", ", types)}>";
    var either2 = $"Either<{string.Join(", ", types)}, Unit>";

    var forests = Enumerable.Range(0, i).Select(n => $"forest{n}").ToArray();
    var trees = Enumerable.Range(0, i).Select(n => $"tree{n}").ToArray();

    var forestTypes = types.Select(n => $"IForest<{n}>").ToArray();
    var treeTypes = types.Select(n => $"ITree<{n}>").ToArray();
#>
    public sealed class DisjointUnionForest<<#= string.Join(", ", types) #>> : IForest<<#= either1 #>>
    {
<#
    foreach(var (type, name) in forestTypes.Zip(forests, (x,y) => (x,y)))
    {
#>
        readonly <#= type #> <#= name #>;
<#
    }
#>

        public DisjointUnionForest(<#= string.Join(", ", forestTypes.Zip(forests, (type, name) => $"{type} {name}")) #>)
        {
<#
    foreach(var name in forests)
    {
#>
            this.<#= name #> = <#= name #> ?? throw new ArgumentNullException(nameof(<#= name #>));
<#
    }
#>
        }

        public IEnumerable<<#= either1 #>> GetChildren(<#= either1 #> node)
        {
            return node.Apply(<#= string.Join(", ", forests.Select((t,n) => $"nodeInner => {t}.GetChildren(nodeInner).Select({either1}.From{n})")) #>);
        }
    }

<#
    if(i < 8) {
#>
    public sealed class DisjoinUnionTree<<#= string.Join(", ", types) #>> : ITree<<#= either2 #>>
    {
<#
    foreach(var (type, name) in treeTypes.Zip(trees, (x,y) => (x,y)))
    {
#>
        readonly <#= type #> <#= name #>;
<#
    }
#>
        readonly <#= either2 #>[] treeRoots;

        public <#= either2 #> Root => Unit.Default;

        public DisjoinUnionTree(<#= string.Join(", ", treeTypes.Zip(trees, (type, name) => $"{type} {name}")) #>)
        {
<#
    foreach(var name in trees)
    {
#>
            this.<#= name #> = <#= name #> ?? throw new ArgumentNullException(nameof(<#= name #>));
<#
    }
#>
            treeRoots = new <#= either2 #>[] { <#= string.Join(", ", trees.Select(t => $"{t}.Root") ) #> };
        }

        public IEnumerable<<#= either2 #>> GetChildren(<#= either2 #> node)
        {
            return node.Apply(<#= string.Join(", ", trees.Select((t,n) => $"nodeInner => {t}.GetChildren(nodeInner).Select({either2}.From{n})")) #>,
                        _ => treeRoots);
        }
    }
<#
    }
}
#>
}