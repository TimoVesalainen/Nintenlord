<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
int startValue = 2;
int endValue = 8;
#>
using System;

namespace Nintenlord.Utility
{
<#
	for (int paramCount = startValue; paramCount <= endValue; paramCount++)
	{
		var indicis = Enumerable.Range(0, paramCount);
		var typeParamNames = indicis.Select(index => $"T{index}").ToArray();
		var typeParams = String.Join(", ", typeParamNames);
        var enumName = "Enum" + paramCount;
		var enumItemNames = indicis.Select(index => $"{enumName}.Item{index}").ToArray();
        var fieldNames = indicis.Select(index => $"option{index}").ToArray();
        var propertyNames = indicis.Select(index => $"Option{index}").ToArray();
        var typeName = $"Either<{typeParams}>";
        var actionNames = indicis.Select(index => $"action{index}").ToArray();
        var actionTypes = typeParamNames.Select(type => $"Action<{type}>").ToArray();
        var funcNames = indicis.Select(index => $"func{index}").ToArray();
        var funcTypes = typeParamNames.Select(type => $"Func<{type}, T>").ToArray();
#>
    public sealed class <#= typeName #> : IEquatable<<#= typeName #>>
    {
        private readonly <#= enumName #> mode;
<#

        for (int i = 0; i < paramCount; i++)
        {
#>
        private readonly <#= typeParamNames[i] #> <#= fieldNames[i] #>;
<#
        }

        for (int i = 0; i < paramCount; i++)
        {
#>
        public <#=typeParamNames[i]#> <#= propertyNames[i] #> => mode == <#= enumItemNames[i] #> ? <#=fieldNames[i]#> : throw new InvalidOperationException($"Either is {this.mode}, not {<#= enumItemNames[i] #>}");
<#
        }
#>

        private Either(<#= enumName #> mode, <#= string.Join(", ", typeParamNames.Zip(fieldNames, (x,y) => $"{x} {y} = default")) #>)
        {
            this.mode = mode;
<#
        for (int i = 0; i < paramCount; i++)
        {
#>
            this.<#= fieldNames[i] #> = <#= fieldNames[i] #>;
<#
        }
#>
        }

<#

        for (int i = 0; i < paramCount; i++)
        {
#>
        public static <#= typeName #> From<#= i #>(<#= typeParamNames[i] #> item)
        {
            return new <#= typeName #>(<#= enumItemNames[i] #>, <#= fieldNames[i] #>: item);
        }

<#
        }

        for (int i = 0; i < paramCount; i++)
        {
#>
        public static implicit operator <#= typeName #>(<#= typeParamNames[i] #> item)
        {
            return From<#= i #>(item);
        }

<#
        }

        for (int i = 0; i < paramCount; i++)
        {
#>
        public static explicit operator <#= typeParamNames[i] #>(<#= typeName #> either)
        {
            return either.<#= propertyNames[i] #>;
        }

<#
        }
#>
        private object ToObject()
        {
            switch (this.mode)
            {
<#
            for (int i = 0; i < paramCount; i++)
            {
#>
                case <#= enumItemNames[i] #>:
                    return this.<#= fieldNames[i] #>;
<#
            }
#>
                default:
                    throw new InvalidProgramException();
            }
        }

        public override string ToString()
        {
            return $"{{{nameof(<#= typeName #>)} {this.mode} {this.ToObject()}}}";
        }

        public bool Equals(<#= typeName #> other)
        {
            if (this.mode == other.mode)
            {
                return Equals(this.ToObject(), other.ToObject());
            }
            else
            {
                return false;
            }
        }

        public override bool Equals(object obj)
        {
            if (obj is <#= typeName #> either)
            {
                return Equals(either);
            }
            else
            {
                return false;
            }
        }

        public override int GetHashCode()
        {
            return ToObject().GetHashCode();
        }

        public void Apply(<#= string.Join(", ", actionTypes.Zip(actionNames, (type, name) => $"{type} {name}")) #>)
        {
            switch (this.mode)
            {
<#
            for (int i = 0; i < paramCount; i++)
            {
#>
                case <#= enumItemNames[i] #>:
                    <#= actionNames[i] #>(this.<#= fieldNames[i] #>);
                    break;
<#
            }
#>
            }
        }

        public T Apply<T>(<#= string.Join(", ", funcTypes.Zip(funcNames, (type, name) => $"{type} {name}")) #>)
        {
            switch (this.mode)
            {
<#
            for (int i = 0; i < paramCount; i++)
            {
#>
                case <#= enumItemNames[i] #>:
                    return <#= funcNames[i] #>(this.<#= fieldNames[i] #>);
<#
            }
#>
                default:
                    throw new InvalidProgramException();
            }
        }
<#
            for (int i = 0; i < paramCount; i++)
            {
#>
        public Maybe<<#= typeParamNames[i] #>> TryGetValue<#= i #>()
        {
            if(this.mode == <#= enumItemNames[i] #>)
            {
                return <#= fieldNames[i] #>;
            }
            else
            {
                return Maybe<<#= typeParamNames[i] #>>.Nothing;
            }
        }
<#
            }
#>
	}
<#
	}
#>
}