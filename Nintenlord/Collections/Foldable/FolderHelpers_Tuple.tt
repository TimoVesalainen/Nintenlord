<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using Nintenlord.Collections.Foldable.Combinatorics;
using System;

namespace Nintenlord.Collections.Foldable
{
    public static partial class FolderHelpers
    {
<#
for (int i = 2; i < 8; i++)
{
    var inputs = Enumerable.Range(0, i).Select(index => $"TIn{index}").ToArray();
    var outputs = Enumerable.Range(0, i).Select(index => $"TOut{index}").ToArray();
    var states = Enumerable.Range(0, i).Select(index => $"TState{index}").ToArray();
    var folderNames = Enumerable.Range(0, i).Select(index => $"folder{index}").ToArray();
    var folderTypesCombine = states.Zip(outputs, (state, output) => $"IFolder<TIn, {state}, {output}>");
    var folderTypesEither = inputs.Zip(states.Zip(outputs, (state, output) => (state, output)), (input, tuple) => $"IFolder<{input}, {tuple.state}, {tuple.output}>");
    var combiner = $"Combiner<TIn, {string.Join(", ", states)}, {string.Join(", ", outputs)}, TOut>";
    var either = $"EitherFolder<{string.Join(", ", inputs)}, {string.Join(", ", states)}, {string.Join(", ", outputs)}>";
#>
        public static <#= combiner #> Combine<TIn, <#= string.Join(", ", states) #>, <#= string.Join(", ", outputs) #>, TOut>(this
<#
    foreach (var (type, name) in folderTypesCombine.Zip(folderNames, (a,b) => (a,b)))
    {
#>
           <#= type #> <#= name #>,
<#
    }
#>
            Func<<#= string.Join(", ", outputs) #>, TOut> combiner)
        {
            return new <#= combiner #>(<#= string.Join(", ", folderNames) #>, combiner);
        }

        public static <#= either #> Either<<#= string.Join(", ", inputs) #>, <#= string.Join(", ", states) #>, <#= string.Join(", ", outputs) #>>(
            this <#= string.Join(", ", folderTypesEither.Zip(folderNames, (type, name) => $"{type} {name}")) #>)
        {
            return new <#= either #>(<#= string.Join(", ", folderNames) #>);
        }

<#
}
#>
    }
}