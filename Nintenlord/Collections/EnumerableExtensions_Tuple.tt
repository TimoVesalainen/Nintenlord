<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using Nintenlord.Utility;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Nintenlord.Collections
{
    public static partial class EnumerableExtensions
	{
<#
for(int i = 2; i < 9; i++)
{
    var typeParams = Enumerable.Range(0, i).Select(x => $"T{x}").ToArray();
    var seeds = Enumerable.Range(0, i).Select(x => $"seed{x}").ToArray();
    var funcs = Enumerable.Range(0, i).Select(x => $"func{x}").ToArray();
    var items = Enumerable.Range(0, i).Select(x => $"item{x}").ToArray();
    var enums = Enumerable.Range(0, i).Select(x => $"enum{x}").ToArray();
    var enumerators = Enumerable.Range(0, i).Select(x => $"enume{x}").ToArray();

    Func<string, string> repeat = s => string.Join(", ", Enumerable.Repeat(s, i));
    var iMaybes = repeat("Maybe<T>");
    var tupleItems = Enumerable.Range(0, i).Select(x => $"a{x}").ToArray();
#>
        public static (<#= string.Join(", ", typeParams) #>) Aggregate<<#= string.Join(", ", typeParams) #>, TSource>(
            this IEnumerable<TSource> source, <#= string.Join(", ", seeds.Zip(typeParams, (n, t) => $"{t} {n}")) #>,
            <#= string.Join(", ", typeParams.Zip(funcs, (t, n) => $"Func<{t}, TSource, {t}> {n}")) #>)
        {
            if (source is null)
            {
                throw new ArgumentNullException(nameof(source));
            }
<#
    foreach(var name in funcs)
    {
#>
            if (<#= name #> is null)
            {
                throw new ArgumentNullException(nameof(<#= name #>));
            }
<#
    }
#>

            var seed = (<#= string.Join(", ", seeds) #>);

            (<#= string.Join(", ", typeParams) #>) Accumalator((<#= string.Join(", ", typeParams) #>) accum, TSource item)
            {
                return (<#= string.Join(", ", funcs.Select((func, i) => $"{func}(accum.Item{i + 1}, item)")) #>);
            }

            return source.Aggregate(seed, Accumalator);
        }

        public static IEnumerable<(<#= repeat("T") #>)> GetSequential<#= i #>s<T>(this IEnumerable<T> items)
        {
            if (items is null)
            {
                throw new ArgumentNullException(nameof(items));
            }

            IEnumerable<(<#= repeat("T") #>)> Inner()
            {
                using var enumerator = items.GetEnumerator();

<#
                for (int j = 0; j < i; j++)
                {
#>
                if (!enumerator.MoveNext())
                {
                    yield break;
                }
                var n<#= j #> = enumerator.Current;
<#
                }
#>

                yield return (<#= string.Join(", ", Enumerable.Range(0, i).Select(j => $"n{j}")) #>);
                while (enumerator.MoveNext())
                {
                    (<#= string.Join(", ", Enumerable.Range(0, i).Select(j => $"n{j}")) #>) = (<#= string.Join(", ", Enumerable.Range(1, i - 1).Select(j => $"n{j}")) #>, enumerator.Current);
                    yield return (<#= string.Join(", ", Enumerable.Range(0, i).Select(j => $"n{j}")) #>);
                }
            }

            return Inner();
        }

        public static (<#= string.Join(", ", Enumerable.Repeat("T", i)) #>) GetFirst<#= i #><T>(this IEnumerable<T> enumerable)
        {
            if (enumerable is null)
            {
                throw new ArgumentNullException(nameof(enumerable));
            }
            using var enumerator = enumerable.GetEnumerator();
<#
    foreach (var item in items)
    {
#>
            if (!enumerator.MoveNext())
            {
                throw new ArgumentException("Enumerable doesn't have enough items", nameof(enumerable));
            }
            var <#= item #> = enumerator.Current;
<#
    }
#>
            return (<#= string.Join(", ", items) #>);
            //Mostly equivalent to (current handles nulls better):
            //return enumerable.GetSequential<#= i #>s().FirstSafe().GetValueOrThrow(() => new ArgumentException("Enumerable doesn't have enough items", nameof(enumerable)));
        }

        public static IEnumerable<(<#= repeat("T") #>)> GetPartitions<#= i #>s<T>(this IEnumerable<T> items)
        {
            if (items is null)
            {
                throw new ArgumentNullException(nameof(items));
            }

            return items.GetSequential<#= i #>s()
                        .Select((x, i) => (x, i))
                        .Where(t => (t.i % <#= i #>) == 0)
                        .Select(t => t.x);
        }

        public static IEnumerable<T> Enumerate<T>(this (<#= repeat("T") #>) tuple)
        {
<#
    for (int j = 0; j < i; j++)
    {
#>
            yield return tuple.Item<#= j + 1 #>;
<#
    }
#>
        }

<#

    if(i > 2)
    {
#>
        public static IEnumerable<TOut> Zip<<#= string.Join(", ", typeParams) #>, TOut>(this <#= string.Join(", ", typeParams.Zip(enums, (t, v) => $"IEnumerable<{t}> {v}")) #>, Func<<#= string.Join(", ", typeParams) #>, TOut> zipper)
        {
<#
        foreach (var v1 in enums)
        {
#>
            if (<#= v1 #> is null)
            {
                throw new ArgumentNullException(nameof(<#= v1 #>));
            }
<#
        }
#>

            IEnumerable<TOut> ZipInner()
            {
<#
        foreach (var (v1, v2) in (enums.Zip(enumerators, ValueTuple.Create)))
        {
#>
                using var <#= v2 #> = <#= v1 #>.GetEnumerator();
<#
        }
#>
                while (<#= string.Join(" && ", enumerators.Select(x => $"{x}.MoveNext()")) #>)
                {
                    yield return zipper(<#= string.Join(", ", enumerators.Select(x => $"{x}.Current"))#>);
                }
            }

            return ZipInner();
        }

<#
    }
#>
        public static IEnumerable<TOut> ZipLong<<#= string.Join(", ", typeParams) #>, TOut>(this <#= string.Join(", ", typeParams.Zip(enums, (t, v) => $"IEnumerable<{t}> {v}")) #>, Func<<#= string.Join(", ", typeParams) #>, TOut> zipper, <#= string.Join(", ", typeParams.Select((t, j) => $"Func<{t}, TOut> zipper{j}")) #>)
        {
<#
        foreach (var v1 in enums)
        {
#>
            if (<#= v1 #> is null)
            {
                throw new ArgumentNullException(nameof(<#= v1 #>));
            }
<#
        }
#>

            if (zipper is null)
            {
                throw new ArgumentNullException(nameof(zipper));
            }
            
<#
        for (int j = 0; j < i; j++)
        {
#>
            if (zipper<#= j #> is null)
            {
                throw new ArgumentNullException(nameof(zipper<#= j #>));
            }
<#
        }
#>

            IEnumerable<TOut> ZipLongInner()
            {
<#
        foreach (var v1 in enums)
        {
#>
                using var <#= v1 #>ator = <#= v1 #>.GetEnumerator();
                bool hasItemIn<#= v1 #>;
<#
        }
#>

                while (<#= string.Join(" & ", enums.Select(v1 => $"(hasItemIn{v1} = {v1}ator.MoveNext())")) #>)
                {
                    yield return zipper(<#= string.Join(", ", enums.Select(enume => $"{enume}ator.Current")) #>);
                }
<#
        foreach (var (v1, j) in enums.Select((x,j) => (x,j)))
        {
#>

                if (hasItemIn<#= v1 #>)
                {
                    do
                    {
                        yield return zipper<#= j #>(<#= v1 #>ator.Current);
                    }
                    while (<#= v1 #>ator.MoveNext());
                }
                else
<#
        }
#>
                {
                    yield break;
                }
            }

            return ZipLongInner();
        }

        public static IEnumerable<TOut> ZipLong<<#= string.Join(", ", typeParams) #>, TOut>(this <#= string.Join(", ", typeParams.Zip(enums, (t, v) => $"IEnumerable<{t}> {v}")) #>, Func<<#= string.Join(", ", typeParams.Select(t => $"Maybe<{t}>")) #>, TOut> zipper)
        {
<#
        foreach (var v1 in enums)
        {
#>
            if (<#= v1 #> is null)
            {
                throw new ArgumentNullException(nameof(<#= v1 #>));
            }
<#
        }
#>

            if (zipper is null)
            {
                throw new ArgumentNullException(nameof(zipper));
            }

            TOut ZipBoth(<#= string.Join(", ", typeParams.Select((t, j) => $"{t} item{j}")) #>)
            {
                return zipper(<#= string.Join(", ", typeParams.Select((t, j) => $"item{j}")) #>);
            }
<#
        foreach (var v1 in typeParams)
        {
#>

            TOut Zip<#= v1 #>(<#= v1 #> t)
            {
                return zipper(<#= string.Join(", ", typeParams.Select(t => t == v1 ? "t" : $"Maybe<{t}>.Nothing")) #>);
            }
<#
        }
#>

            return <#= enums.First() #>.ZipLong(<#= string.Join(", ", enums.Skip(1))  #>, ZipBoth, <#= string.Join(", ", typeParams.Select(t => $"Zip{t}")) #>);
        }

<#
}
#>
	}
}